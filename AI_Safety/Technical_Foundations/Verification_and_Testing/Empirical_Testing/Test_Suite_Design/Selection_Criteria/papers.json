[
  {
    "url": "https://arxiv.org/abs/2309.07518",
    "title": "Coverage Goal Selector for Combining Multiple Criteria in Search-Based Unit Test Generation",
    "published_date": "2023-09-14",
    "abstract": "Unit testing is critical to the software development process, ensuring the correctness of basic programming units in a program (e.g., a method). Search-based software testing (SBST) is an automated approach to generating test cases. SBST generates test cases with genetic algorithms by specifying the coverage criterion (e.g., branch coverage). However, a good test suite must have different properties, which cannot be captured using an individual coverage criterion. Therefore, the state-of-the-art approach combines multiple criteria to generate test cases. Since combining multiple coverage criteria brings multiple objectives for optimization, it hurts the test suites' coverage for certain criteria compared with using the single criterion. To cope with this problem, we propose a novel approach named <bold>smart selection</bold>. Based on the coverage correlations among criteria and the subsumption relationships among coverage goals, smart selection selects a subset of coverage goals to reduce the number of optimization objectives and avoid missing any properties of all criteria. We conduct experiments to evaluate smart selection on <inline-formula><tex-math notation=\"LaTeX\">$400$</tex-math><alternatives><mml:math><mml:mn>400</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq1-3366613.gif\"/></alternatives></inline-formula> Java classes with three state-of-the-art genetic algorithms under the <inline-formula><tex-math notation=\"LaTeX\">$2$</tex-math><alternatives><mml:math><mml:mn>2</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq2-3366613.gif\"/></alternatives></inline-formula>-minute budget. On average, smart selection outperforms combining all goals on <inline-formula><tex-math notation=\"LaTeX\">$65.1\\%$</tex-math><alternatives><mml:math><mml:mn>65.1</mml:mn><mml:mi mathvariant=\"normal\">%</mml:mi></mml:math><inline-graphic xlink:href=\"zhou-ieq3-3366613.gif\"/></alternatives></inline-formula> of the classes having significant differences between the two approaches. Secondly, we conduct experiments to verify our assumptions about coverage criteria relationships. Furthermore, we assess the coverage performance of smart selection under varying budgets of <inline-formula><tex-math notation=\"LaTeX\">$5$</tex-math><alternatives><mml:math><mml:mn>5</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq4-3366613.gif\"/></alternatives></inline-formula>, <inline-formula><tex-math notation=\"LaTeX\">$8$</tex-math><alternatives><mml:math><mml:mn>8</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq5-3366613.gif\"/></alternatives></inline-formula>, and <inline-formula><tex-math notation=\"LaTeX\">$10$</tex-math><alternatives><mml:math><mml:mn>10</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq6-3366613.gif\"/></alternatives></inline-formula> minutes and explore its effect on bug detection, confirming the advantage of smart selection over combining all goals."
  },
  {
    "url": "https://arxiv.org/abs/2310.07448",
    "title": "Faster Location in Combinatorial Interaction Testing",
    "published_date": "2023-10-11",
    "abstract": "Factors within a large-scale software system that simultaneously interact and strongly impact the system's response under a configuration are often difficult to identify. Although screening such a system for the existence of such interactions is important, determining their location is more useful for system engineers. Combinatorial interaction testing (CIT) concerns creation of test suites that nonadaptively either detect or locate the desired interactions, each of at most a specified size or show that no such set exists. Under the assumption that there are at most a given number of such interactions causing such a response, locating arrays (LAs) guarantee unique location for every such set of interactions and an algorithm to deal with outliers and nondeterministic behavior from real systems, we additionally require the LAs to have a\"separation\"between these collections. State-of-the-art approaches generate LAs that can locate at most one interaction of size at most three, due to the massive number of interaction combinations for larger parameters if no constraints are given. This paper presents LocAG, a two-stage algorithm that generates (unconstrained) LAs using a simple, but powerful partitioning strategy of these combinations. In particular, we are able to generate LAs with more factors, with any desired separation, and greater interaction size than existing approaches."
  },
  {
    "url": "https://arxiv.org/pdf/2207.09509v1.pdf",
    "title": "TestSelector: Automatic Test Suite Selection for Student Projects - Extended Version",
    "published_date": "2022-07-19",
    "abstract": "Computer Science course instructors routinely have to create comprehensive test suites to assess programming assignments. The creation of such test suites is typically not trivial as it involves selecting a limited number of tests from a set of (semi-)randomly generated ones. Manual strategies for test selection do not scale when considering large testing inputs needed, for instance, for the assessment of algorithms exercises. To facilitate this process, we present TestSelector, a new framework for automatic selection of optimal test suites for student projects. The key advantage of TestSelector over existing approaches is that it is easily extensible with arbitrarily complex code coverage measures, not requiring these measures to be encoded into the logic of an exact constraint solver. We demonstrate the flexibility of TestSelector by extending it with support for a range of classical code coverage measures and using it to select test suites for a number of real-world algorithms projects, further showing that the selected test suites outperform randomly selected ones in finding bugs in students' code.",
    "citation_count": 1
  },
  {
    "url": "https://arxiv.org/pdf/2203.09596v2.pdf",
    "title": "Prioritized Variable-length Test Cases Generation for Finite State Machines",
    "published_date": "2022-03-17",
    "abstract": "Model-based Testing (MBT) is an effective approach for testing when parts of a system-under-test have the characteristics of a finite state machine (FSM). Despite various strategies in the literature on this topic, little work exists to handle special testing situations. More specifically, when concurrently: (1) the test paths can start and end only in defined states of the FSM, (2) a prioritization mechanism that requires only defined states and transitions of the FSM to be visited by test cases is required, and (3) the test paths must be in a given length range, not necessarily of explicit uniform length. This paper presents a test generation strategy that satisfies all these requirements. A concurrent combination of these requirements is highly practical for real industrial testing. Six variants of possible algorithms to implement this strategy are described. Using a mixture of 180 problem instances from real automotive and defense projects and artificially generated FSMs, all variants are compared with a baseline strategy based on an established N-switch coverage concept modification. Various properties of the generated test paths and their potential to activate fictional defects defined in FSMs are evaluated. The presented strategy outperforms the baseline in most problem configurations. Out of the six analyzed variants, three give the best results even though a universal best performer is hard to identify. Depending on the application of the FSM, the strategy and evaluation presented in this paper are applicable both in testing functional and non-functional software requirements.",
    "citation_count": 1
  },
  {
    "url": "https://www.lesswrong.com/posts/d9MkMeLWvoDEsqpQP/a-compilation-of-misuses-of-statistics",
    "author": "Younes Kamel",
    "title": "A compilation of misuses of statistics",
    "published_date": "2022-02-14"
  },
  {
    "url": "https://www.lesswrong.com/posts/cCcCJnvMEHqrgiCnx/practical-use-of-the-beta-distribution-for-data-analysis",
    "author": "Maxwell Peterson",
    "title": "Practical use of the Beta distribution for data analysis",
    "published_date": "2022-04-03"
  }
]