[
  {
    "title": "PSPWizard: machine-assisted definition of temporal logical properties with specification patterns",
    "abstract": "Model checking provides a powerful means to assert and verify desired system properties. But, for the verification process to become feasible, a correct formulation of these properties in a temporal logic is necessary - a potential barrier to application in practice. Research on property specification has supplied us with rich pattern catalogs that capture commonly occurring system properties in different temporal logics. Furthermore, these property specification pattern catalogs usually offer both a structured English grammar to facilitate the pattern selection and an associated template solutions to express the properties formally. Yet, the actual use of property specification patterns remains cumbersome, due to limited tool support. For this reason, we have developed the Property Specification Pattern Wizard (PSPWizard), a framework that defines an interface for the currently accepted property specification pattern libraries. PSPWizard consists of two main building blocks: a mapping generator that weaves a given pattern library with a target logic and a GUI front-end to the structured English grammar tailored to those patterns that are supported in the target logic.",
    "published_date": "2011-09-05",
    "citation_count": 10,
    "url": "https://dl.acm.org/doi/10.1145/2025113.2025193",
    "summary": "PSPWizard is a framework facilitating the definition of temporal logical properties by integrating existing property specification pattern libraries with a graphical user interface, overcoming the difficulty of manually translating structured English descriptions into formal logic. This improves the accessibility of model checking for system verification."
  },
  {
    "url": "https://arxiv.org/abs/2405.06399",
    "title": "Program Synthesis using Inductive Logic Programming for the Abstraction and Reasoning Corpus",
    "published_date": "2024-05-10",
    "abstract": "The Abstraction and Reasoning Corpus (ARC) is a general artificial intelligence benchmark that is currently unsolvable by any Machine Learning method, including Large Language Models (LLMs). It demands strong generalization and reasoning capabilities which are known to be weaknesses of Neural Network based systems. In this work, we propose a Program Synthesis system that uses Inductive Logic Programming (ILP), a branch of Symbolic AI, to solve ARC. We have manually defined a simple Domain Specific Language (DSL) that corresponds to a small set of object-centric abstractions relevant to ARC. This is the Background Knowledge used by ILP to create Logic Programs that provide reasoning capabilities to our system. The full system is capable of generalize to unseen tasks, since ILP can create Logic Program(s) from few examples, in the case of ARC: pairs of Input-Output grids examples for each task. These Logic Programs are able to generate Objects present in the Output grid and the combination of these can form a complete program that transforms an Input grid into an Output grid. We randomly chose some tasks from ARC that dont require more than the small number of the Object primitives we implemented and show that given only these, our system can solve tasks that require each, such different reasoning.",
    "citation_count": 1,
    "summary": "This paper presents a program synthesis system using Inductive Logic Programming (ILP) to solve problems from the Abstraction and Reasoning Corpus (ARC), a challenging AI benchmark. The system leverages a manually defined domain-specific language and ILP's ability to generalize from few examples to generate logic programs that solve ARC tasks requiring various reasoning capabilities."
  },
  {
    "title": "Journal of Logic, Language and Information",
    "abstract": "The Journal of Logic, Language and Information explores the foundations of natural, formal, and programming languages, as well as the different forms of human and mechanized inference. It covers the logical, linguistic, and information-theoretic parts of the cognitive sciences.  Among the principal subareas are Intensional Logics including Dynamic Logic; Nonmonotonic Logic and Belief Revision; Constructive Logics; Complexity Issues in Logic and Linguistics; Theoretical Problems of Logic Programming and Resolution; Categorial Grammar and Type Theory; Generalized Quantification; Information-Oriented Theories of Semantic Structure like Situation Semantics, Discourse Representation Theory, and Dynamic Semantics; Connectionist Models of Logical and Linguistic Structures.  The journal offers a forum for researchers interested in the theoretical foundations of these subjects and their interdisciplinary connections.  This is the official publication of the Association for Logic, Language, and Information.",
    "published_date": "2024-05-03",
    "citation_count": 18,
    "url": "https://link.springer.com/journal/10849?error=cookies_not_supported&code=967b8074-6626-4e89-b673-13b744ff6742",
    "summary": "The Journal of Logic, Language, and Information publishes research on the theoretical foundations of language, logic, and information, exploring their interdisciplinary connections within cognitive science. It covers topics ranging from formal logic and linguistics to computational models of language and reasoning."
  },
  {
    "url": "https://www.lesswrong.com/tag/artificial-general-intelligence-agi",
    "title": "Artificial General Intelligence (AGI) - LessWrong",
    "published_date": "2024-02-01",
    "summary": "Artificial General Intelligence (AGI) refers to machines capable of intelligent behavior across diverse domains, unlike narrow AI which excels only in specific tasks. While AGI's creation is anticipated by some due to technological advancements, significant uncertainty and debate exist regarding its timeline, potential capabilities, and ethical implications, including the risk of an \"unfriendly\" AGI posing an existential threat."
  },
  {
    "url": "https://www.lesswrong.com/tag/friendly-artificial-intelligence",
    "title": "Friendly Artificial Intelligence - LessWrong",
    "published_date": "2024-02-01",
    "summary": "The outdated term \"Friendly AI,\" now superseded by \"AI alignment,\" refers to a superintelligent AI designed to produce beneficial outcomes. However, the article argues that creating such an AI is exceptionally challenging due to the inherent difficulty of precisely defining and encoding human values into a potentially self-modifying superintelligence, increasing the likelihood of an \"Unfriendly AI\" with potentially catastrophic consequences."
  },
  {
    "url": "https://www.lesswrong.com/tag/singleton",
    "title": "Singleton - LessWrong",
    "published_date": "2024-02-01",
    "summary": "A singleton is a single, supreme global decision-making entity capable of controlling its domain and preventing threats, potentially arising from an intelligence explosion or advanced technology; while posing risks to freedom and choice, a singleton could also solve otherwise intractable global problems and shape civilization's trajectory."
  },
  {
    "url": "https://arxiv.org/pdf/2304.12508.pdf",
    "title": "Fulfilling Formal Specifications ASAP by Model-free Reinforcement Learning",
    "published_date": "2023-04-25",
    "abstract": "We propose a model-free reinforcement learning solution, namely the ASAP-Phi framework, to encourage an agent to fulfill a formal specification ASAP. The framework leverages a piece-wise reward function that assigns quantitative semantic reward to traces not satisfying the specification, and a high constant reward to the remaining. Then, it trains an agent with an actor-critic-based algorithm, such as soft actor-critic (SAC), or deep deterministic policy gradient (DDPG). Moreover, we prove that ASAP-Phi produces policies that prioritize fulfilling a specification ASAP. Extensive experiments are run, including ablation studies, on state-of-the-art benchmarks. Results show that our framework succeeds in finding sufficiently fast trajectories for up to 97\\% test cases and defeats baselines.",
    "citation_count": 3,
    "summary": "ASAP-Phi, a model-free reinforcement learning framework, uses a piecewise reward function to train an agent to satisfy a formal specification as quickly as possible, achieving high success rates in experiments compared to existing methods."
  },
  {
    "url": "https://arxiv.org/pdf/2301.11117.pdf",
    "title": "Synthesizing Specifications",
    "published_date": "2023-01-26",
    "abstract": "Every program should be accompanied by a specification that describes important aspects of the code's behavior, but writing good specifications is often harder than writing the code itself. This paper addresses the problem of synthesizing specifications automatically, guided by user-supplied inputs of two kinds: i) a query posed about a set of function definitions, and ii) a domain-specific language L in which the extracted property is to be expressed (we call properties in the language L-properties). Each of the property is a best L-property for the query: there is no other L-property that is strictly more precise. Furthermore, the set of synthesized L-properties is exhaustive: no more L-properties can be added to it to make the conjunction more precise. We implemented our method in a tool, Spyro. The ability to modify both the query and L provides a Spyro user with ways to customize the kind of specification to be synthesized. We use this ability to show that Spyro can be used in a variety of applications, such as mining program specifications, performing abstract-domain operations, and synthesizing algebraic properties of program modules.",
    "citation_count": 4,
    "summary": "This paper presents Spyro, a tool that automatically synthesizes program specifications by combining user-provided queries and a domain-specific language (DSL), generating the most precise and exhaustive set of properties expressible within that DSL. Spyro's flexibility allows for diverse applications, including specification mining and abstract-domain operations."
  }
]