[
  {
    "url": "https://arxiv.org/abs/2408.01815",
    "title": "Facilitating the Parametric Definition of Geometric Properties in Programming-Based CAD",
    "published_date": "2024-08-03",
    "abstract": "Parametric Computer-aided design (CAD) enables the creation of reusable models by integrating variables into geometric properties, facilitating customization without a complete redesign. However, creating parametric designs in programming-based CAD presents significant challenges. Users define models in a code editor using a programming language, with the application generating a visual representation in a viewport. This process involves complex programming and arithmetic expressions to describe geometric properties, linking various object properties to create parametric designs. Unfortunately, these applications lack assistance, making the process unnecessarily demanding. We propose a solution that allows users to retrieve parametric expressions from the visual representation for reuse in the code, streamlining the design process. We demonstrated this concept through a proof-of-concept implemented in the programming-based CAD application, OpenSCAD, and conducted an experiment with 11 users. Our findings suggest that this solution could significantly reduce design errors, improve interactivity and engagement in the design process, and lower the entry barrier for newcomers by reducing the mathematical skills typically required in programming-based CAD applications",
    "summary": "Programming-based CAD lacks tools for easily defining and reusing parametric geometric properties, hindering efficient design; this paper proposes and evaluates a system that extracts parametric expressions from visual representations to simplify the design process and reduce user errors."
  },
  {
    "url": "https://www.lesswrong.com/tag/singularitarianism",
    "title": "Singularitarianism - LessWrong",
    "published_date": "2024-02-01",
    "summary": "Singularitarianism describes beliefs favoring a technological singularity, though its meaning has evolved from an activist stance focused on beneficial AI development (as defined by Eliezer Yudkowsky) to encompass broader predictions and perspectives on technological advancement and human-machine merging."
  },
  {
    "url": "https://www.alignmentforum.org/tag/singularitarianism",
    "title": "Singularitarianism - AI Alignment Forum",
    "published_date": "2024-02-01",
    "summary": "Singularitarianism describes beliefs favoring a technological singularity, though its meaning has evolved from an activist movement aiming to benefit humanity (as defined by Eliezer Yudkowsky) to encompass broader predictions and perspectives on technological advancement."
  },
  {
    "url": "https://www.lesswrong.com/posts/rQxrSRPJGmksGjK8z/it-s-time-for-a-self-reproducing-machine",
    "author": "Carl Feynman",
    "title": "It's time for a self-reproducing machine",
    "published_date": "2024-08-07",
    "summary": "The article proposes a design for a self-reproducing machine, called an Autofac, capable of constructing copies of itself using readily available materials and existing software technologies like LLMs, project planning software, and CAM. The Autofac's AI leverages these tools to manage complex tasks, requesting human assistance only when necessary, and learning from shared experiences across a growing network of Autofacs."
  },
  {
    "url": "https://www.lesswrong.com/tag/abolitionism",
    "title": "Abolitionism - LessWrong",
    "published_date": "2024-02-01",
    "summary": "Abolitionism, a transhumanist movement founded by David Pearce, aims to eradicate all suffering through biotechnology, creating a state of intelligent bliss. This goal contrasts with critiques, such as Eliezer Yudkowsky's argument that eliminating all suffering would eliminate meaningful experience."
  },
  {
    "url": "https://arxiv.org/pdf/2308.15084.pdf",
    "title": "Introducing Interactions in Multi-Objective Optimization of Software Architectures",
    "published_date": "2023-08-29",
    "abstract": "Software architecture optimization aims to enhance non-functional attributes like performance and reliability while meeting functional requirements. Multi-objective optimization employs metaheuristic search techniques, such as genetic algorithms, to explore feasible architectural changes and propose alternatives to designers. However, this resource-intensive process may not always align with practical constraints.\n This study investigates the impact of designer interactions on multi-objective software architecture optimization. Designers can intervene at intermediate points in the fully automated optimization process, making choices that guide exploration towards more desirable solutions. Through several controlled experiments as well as an initial user study (14 subjects), we compare this interactive approach with a fully automated optimization process, which serves as a baseline. The findings demonstrate that designer interactions lead to a more focused solution space, resulting in improved architectural quality. By directing the search towards regions of interest, the interaction uncovers architectures that remain unexplored in the fully automated process. In the user study, participants found that our interactive approach provides a better trade-off between sufficient exploration of the solution space and the required computation time.",
    "citation_count": 1,
    "summary": "This study compares automated and interactive multi-objective optimization of software architectures, finding that designer interaction, while requiring more active participation, yields higher-quality architectures by focusing the search on more promising solution spaces. Controlled experiments and a user study support this conclusion."
  },
  {
    "url": "https://arxiv.org/abs/2304.08748",
    "title": "Option-Driven Design: Context, Tradeoffs, and Considerations for Accessibility",
    "published_date": "2023-04-18",
    "abstract": "In Option-Driven Design, users must interact with options and settings for systems to adapt to their needs. This approach places the burden on both the user and the system to make the interaction between user and system fit. The user must know and find which options they need and then adjust them. In addition, the system must be capable of robust change, similar to system change in ability-based design. In this micro-paper I outline the context for option-driven design, followed by several design negotiations, tradeoffs, and suggestions worth considering with this approach.",
    "citation_count": 1,
    "summary": "Option-Driven Design empowers users to customize systems through options and settings, requiring users to identify and adjust these settings while demanding robust system adaptability. This approach necessitates careful consideration of design tradeoffs and user experience implications."
  },
  {
    "url": "https://arxiv.org/pdf/2210.11468.pdf",
    "title": "ObSynth: An Interactive Synthesis System for Generating Object Models from Natural Language Specifications",
    "published_date": "2022-10-20",
    "abstract": "We introduce ObSynth, an interactive system leveraging the domain knowledge embedded in large language models (LLMs) to help users design object models from high level natural language prompts. This is an example of specification reification, the process of taking a high-level, potentially vague specification and reifying it into a more concrete form. We evaluate ObSynth via a user study, leading to three key findings: first, object models designed using ObSynth are more detailed, showing that it often synthesizes fields users might have otherwise omitted. Second, a majority of objects, methods, and fields generated by ObSynth are kept by the user in the final object model, highlighting the quality of generated components. Third, ObSynth altered the workflow of participants: they focus on checking that synthesized components were correct rather than generating them from scratch, though ObSynth did not reduce the time participants took to generate object models.",
    "citation_count": 1,
    "summary": "ObSynth is an interactive system using large language models to generate detailed object models from natural language descriptions, significantly improving model completeness compared to manual creation while shifting user effort towards verification rather than generation. A user study confirmed the system's effectiveness in generating high-quality components, although it didn't reduce overall design time."
  }
]