[
  {
    "url": "https://arxiv.org/abs/2411.13269",
    "title": "Towards Specification-Driven LLM-Based Generation of Embedded Automotive Software",
    "published_date": "2024-11-20",
    "abstract": "The paper studies how code generation by LLMs can be combined with formal verification to produce critical embedded software. The first contribution is a general framework, spec2code, in which LLMs are combined with different types of critics that produce feedback for iterative backprompting and fine-tuning. The second contribution presents a first feasibility study, where a minimalistic instantiation of spec2code, without iterative backprompting and fine-tuning, is empirically evaluated using three industrial case studies from the heavy vehicle manufacturer Scania. The goal is to automatically generate industrial-quality code from specifications only. Different combinations of formal ACSL specifications and natural language specifications are explored. The results indicate that formally correct code can be generated even without the application of iterative backprompting and fine-tuning.",
    "citation_count": 2,
    "summary": "This paper proposes a framework, spec2code, for generating formally verified embedded automotive software using LLMs and feedback critics, demonstrating feasibility through a study generating industrial-quality code from specifications (ACSL and natural language) in three Scania case studies, even without iterative refinement."
  },
  {
    "url": "https://arxiv.org/abs/2401.17596",
    "title": "An Interactive Empirical Approach to the Validation of Software Package Specifications",
    "published_date": "2024-01-31",
    "abstract": "The objective of this research is the development of a practical system to manipulate and validate software package specifications. The validation process developed is based on consistency checks. Furthermore, by means of scenarios, the customer will be able to interactively experience the specified system prior to its implementation. Functions, data, and data types constitute the framework of our validation system. The specification of the Graphical Kernel System (GKS) is a typical example of the target software package specifications to be manipulated.",
    "citation_count": 1,
    "summary": "This paper presents an interactive system for validating software package specifications, using consistency checks and interactive scenarios to allow customers to experience the specified system before implementation. The system focuses on functions, data, and data types, exemplified by the Graphical Kernel System (GKS) specification."
  },
  {
    "url": "https://arxiv.org/abs/2409.14301",
    "title": "Multi-Grained Specifications for Distributed System Model Checking and Verification",
    "published_date": "2024-09-22",
    "abstract": "This paper presents our experience specifying and verifying the correctness of ZooKeeper, a complex and evolving distributed coordination system. We use TLA+ to model fine-grained behaviors of ZooKeeper and use the TLC model checker to verify its correctness properties; we also check conformance between the model and code. The fundamental challenge is to balance the granularity of specifications and the scalability of model checking -- fine-grained specifications lead to state-space explosion, while coarse-grained specifications introduce model-code gaps. To address this challenge, we write specifications with different granularities for composable modules, and compose them into mixed-grained specifications based on specific scenarios. For example, to verify code changes, we compose fine-grained specifications of changed modules and coarse-grained specifications that abstract away details of unchanged code with preserved interactions. We show that writing multi-grained specifications is a viable practice and can cope with model-code gaps without untenable state space, especially for evolving software where changes are typically local and incremental. We detected six severe bugs that violate five types of invariants and verified their code fixes; the fixes have been merged to ZooKeeper. We also improve the protocol design to make it easy to implement correctly.",
    "summary": "This paper describes a method for verifying the correctness of complex distributed systems like ZooKeeper using multi-grained TLA+ specifications, balancing detailed fine-grained models for precise verification with coarser-grained models for scalability, enabling efficient verification of incremental code changes and revealing six previously unknown bugs."
  },
  {
    "url": "https://arxiv.org/pdf/2209.01473.pdf",
    "title": "Model‐based analysis and specification of functional requirements and tests for complex automotive systems",
    "published_date": "2022-09-03",
    "abstract": "The specification of requirements and tests are crucial activities in automotive development projects. However, due to the increasing complexity of automotive systems, practitioners fail to specify requirements and tests for distributed and evolving systems with complex interactions when following traditional development processes. To address this research gap, we propose a technique that starts with the early identification of validation concerns from a stakeholder perspective, which we use to systematically design tests that drive a scenario‐based modeling and analysis of system requirements. To ensure complete and consistent requirements and test specifications in a form that is required in automotive development projects, we develop a Model‐Based Systems Engineering (MBSE) methodology. This methodology supports system architects and test designers in the collaborative application of our technique and in maintaining a central system model, in order to automatically derive the required specifications. We evaluate our methodology by applying it at KOSTAL (Tier1 supplier) and within student projects as part of the masters program Embedded Systems Engineering. Our study corroborates that our methodology is applicable and improves existing requirements and test specification processes by supporting the integrated and stakeholder‐focused modeling of product and validation systems, where the early definition of stakeholder and validation concerns fosters a problem‐oriented, iterative and test‐driven requirements modeling.",
    "citation_count": 2,
    "summary": "This paper presents a Model-Based Systems Engineering (MBSE) methodology for specifying automotive system requirements and tests, addressing challenges posed by increasing system complexity through stakeholder-driven scenario-based modeling and analysis, resulting in complete, consistent, and automatically derived specifications. The methodology's effectiveness is validated through industrial and academic applications."
  },
  {
    "url": "https://arxiv.org/abs/2210.10304",
    "title": "Synthesizing Reactive Test Environments for Autonomous Systems: Testing Reach-Avoid Specifications with Multi-Commodity Flows",
    "published_date": "2022-10-19",
    "abstract": "We study automated test generation for testing discrete decision-making modules in autonomous systems. Linear temporal logic is used to encode the system specification - requirements of the system under test - and the test specification, which is unknown to the system and describes the desired test behavior. The reactive test synthesis problem is to find constraints on system actions such that in a test execution, both the system and test specifications are satisfied. To do this, we use the specifications and their corresponding Büchi automata to construct the specification product automaton. Then, a virtual product graph representing all possible test executions of the system is constructed from the transition system and the specification product automaton. The main result of this paper is framing the test synthesis problem as a multi-commodity network flow optimization. This optimization is used to derive reactive constraints on system actions, which constitute the test environment. The resulting test environment ensures that the system meets the test specification while also satisfying the system specification. We illustrate this framework in simulation using grid world examples and demonstrate it on hardware with the Unitree A1 quadruped, where we test dynamic locomotion behaviors reactively.",
    "citation_count": 2,
    "summary": "This paper presents a novel method for automated test generation of autonomous systems, framing the reactive test synthesis problem as a multi-commodity network flow optimization to generate constraints ensuring both system and test specifications are met during execution. This approach is demonstrated through simulations and hardware testing on a quadruped robot."
  },
  {
    "title": "Introduction to the Special Issue on Specification and Design Languages (FDL 2019)",
    "abstract": "The Forum on Specification and Design Languages (FDL) is a well-established international venue to exchange experiences and promote new trends in the application of languages, their associated design methods, and tools for the design of electronic systems. Electronic systems of interest to FDL include (but are not limited to) those that are used in Internet of Things (IoT), CyberPhysical Systems, mixed criticality embedded systems, embedded systems for high-performance computing and driver assistance, real-time systems, and reconfigurable and secure computing. FDL 2019 was held in Southampton, UK, September 2–4, bringing together 44 researchers and practicioners from 10 countries. The three keynotes covered themes ranging from designing heterogeneous domain-specific languages and compilers (David Broman, KTH Royal Institute of Technology, Stockholm) over balancing implementability, understandability, and expressiveness in language design (Stephen A. Edwards, Columbia University, New York) to formal languages for embedded critical software (Marc Pouzet, École Normale Supérieure, Paris). In addition, the technical program of FDL 2019 contained two tutorials, two panels, and six technical sessions with a total of 26 presentations. To allow for more in-depth treatment of selected contributions and to further broaden the audience, an open call was made for this special issue in ACM TECS. As a result, six updated and extended papers from FDL'19 are included here, joined by a seventh paper on original work not presented at FDL before. “SystemC implementation of Stochastic Petri Nets for Parametrization of Biological Networks” is authored by Nicola Bombieri, Silvia Scaffeo, Antonio Mastrandrea, Simone Caligola, Tommaso Carlucci, Franco Fummi, Carlo Laudanna, Gabriela Constantin, and Rosalba Giugno. This multidisciplinary paper presents a framework for the modeling and simulation of biological network using Stochastic Petri Nets. To achieve automatic model parametrization, the Stochastic Petri Nets model is implemented into SystemC code, while user-defined properties are specified with a formal specification language. Then, Dynamic Assertion-Based Verification is used to synthesize an appropriate network and parameter configuration that satisfies the defined properties. This allows the system to be simulated under different conditions and network properties. “Event-B Hybridation: A Proof and Refinement Based Framework for Modelling Hybrid Systems,” by Guillaume Dupont, Yamine Ait-Ameur, Marc Pantel, and Neeraj Singh, is an original work not presented at FDL '19. It addresses the difficult topic of the formal proof (in the proof assistant sense) and the incremental design of hybrid systems. The underlying proof assistant is the Rodin Proof Manager and its associated programming language Event-B (based on the B method by Abrial). Hybrid systems are modeled as standard hybrid automata with simple differential equations, which is classical. The strong point of the proposed approach is that the proof obligations",
    "published_date": "2021-05-28",
    "url": "https://dl.acm.org/doi/10.1145/3458748",
    "summary": "This special issue of ACM TECS features seven papers, six of which are extended versions of presentations from the 2019 Forum on Specification and Design Languages (FDL), covering topics in electronic system design using various specification and design languages and methods; one additional paper presents original, previously unpublished work."
  },
  {
    "url": "https://arxiv.org/pdf/2102.06037v1.pdf",
    "title": "Validation Obligations: A Novel Approach to Check Compliance between Requirements and their Formal Specification",
    "published_date": "2021-02-11",
    "abstract": "Traditionally, practitioners use formal methods pre-dominately for one half of the quality-assurance process: verification (do we build the software right?). The other half - validation (do we build the right software?) - has been given comparatively little attention. While verification is the core of refinement-based formal methods, where each new refinement step must preserve all properties of its abstract model, validation is usually postponed until the latest stages of the development, when models can be automatically executed. Thus mistakes in requirementsor in their interpretation are caught too late: usually at the endof the development process. In this paper, we present a novelapproach to check compliance between requirements and theirformal refinement-based specification during the earlier stages ofdevelopment. Our proposed approach - \"validation obligations\"- is based on the simple idea that both verification and validationare an integral part of all refinement steps of a system.",
    "citation_count": 5,
    "summary": "This paper introduces \"validation obligations,\" a novel approach to ensure compliance between software requirements and their formal specifications throughout the development process, addressing the often-neglected validation aspect of formal methods. This contrasts with traditional approaches that primarily focus on verification and postpone validation until late stages."
  },
  {
    "url": "https://arxiv.org/pdf/2108.08282v3.pdf",
    "title": "OACAL: Finding Module-consistent Specifications to Secure Systems from Weakened User Obligations",
    "published_date": "2021-08-16",
    "abstract": "Users interacting with a system through UI are typically obliged to perform their actions in a pre-determined order, to successfully achieve certain functional goals. However, such obligations are often not followed strictly by users, which may lead to the violation to security properties, especially in security-critical systems. To improve the security with the awareness of unexpected user behaviors, a system can be redesigned to a more robust one by changing the order of actions in its specification. Meanwhile, we anticipate that the functionalities would remain consistent following the modifications. In this paper, we propose an efficient algorithm to automatically produce specification revisions tackling the attack scenarios caused by weakened user obligations. By our algorithm, all the revisions would be generated to maintain the integrity of the functionalities using a novel recomposition approach. Then, the eligible revisions that can satisfy the security requirements would be efficiently spotted by a hybrid approach combining model checking and machine learning techniques. We evaluate our algorithm by comparing its performance with a state-of-the-art approach regarding their coverage and searching speed of the desirable revisions.",
    "summary": "OACAL is an algorithm that automatically revises system specifications to enhance security against attacks stemming from users deviating from expected interaction order, ensuring functional consistency through a novel recomposition approach and efficiently identifying secure revisions using model checking and machine learning. The algorithm improves upon existing methods in both speed and coverage of desirable revisions."
  }
]