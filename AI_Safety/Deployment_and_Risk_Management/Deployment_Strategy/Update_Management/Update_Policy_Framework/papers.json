[
  {
    "url": "https://arxiv.org/abs/2411.19854",
    "title": "Timely and Energy-Efficient Multi-Step Update Processing",
    "published_date": "2024-11-29",
    "abstract": "This work explores systems where source updates require multiple sequential processing steps. We model and analyze the Age of Information (AoI) performance of various system designs under both parallel and series server setups. In parallel setups, each processor executes all computation steps with multiple processors working in parallel, while in series setups, each processor performs a specific step in sequence. In practice, processing faster is better in terms of age but it also consumes more power. We identify the occurrence of wasted power in these setups, which arises when processing efforts do not lead to a reduction in age. This happens when a fresher update finishes first in parallel servers or when a server preempts processing due to a fresher update from preceding server in series setups. To address this age-power trade-off, we formulate and solve an optimization problem to determine the optimal service rates for each processing step under a given power budget. We focus on a special case where updates require two computational steps.",
    "summary": "This paper analyzes the age of information (AoI) in multi-step update processing systems, examining parallel and series server architectures to optimize processing rates and minimize energy consumption while considering the trade-off between faster processing and increased power usage. The authors identify sources of wasted power and propose an optimization solution to determine optimal service rates under a power budget constraint."
  },
  {
    "url": "https://arxiv.org/abs/2402.05407",
    "title": "Version Age-Based Client Scheduling Policy for Federated Learning",
    "published_date": "2024-02-08",
    "abstract": "Federated Learning (FL) has emerged as a privacy-preserving machine learning paradigm facilitating collaborative training across multiple clients without sharing local data. Despite advancements in edge device capabilities, communication bottlenecks present challenges in aggregating a large number of clients; only a portion of the clients can update their parameters upon each global aggregation. This phenomenon introduces the critical challenge of stragglers in FL and the profound impact of client scheduling policies on global model convergence and stability. Existing scheduling strategies address staleness but predominantly focus on either timeliness or content. Motivated by this, we introduce the novel concept of Version Age of Information (VAoI) to FL. Unlike traditional Age of Information metrics, VAoI considers both timeliness and content staleness. Each client's version age is updated discretely, indicating the freshness of information. VAoI is incorporated into the client scheduling policy to minimize the average VAoI, mitigating the impact of outdated local updates and enhancing the stability of FL systems.",
    "summary": "This paper proposes a novel Federated Learning (FL) client scheduling policy that uses Version Age of Information (VAoI) to minimize the impact of outdated client updates, improving convergence and stability by considering both the timeliness and staleness of client model versions. The VAoI-based scheduling selects clients to maximize the freshness of their model updates for global aggregation."
  },
  {
    "url": "https://arxiv.org/pdf/2211.17218.pdf",
    "title": "Specification Architectural Viewpoint for Benefit-Cost-Risk-Aware Decision-Making in Self-Adaptive Systems",
    "published_date": "2022-11-30",
    "abstract": "Over the past two decades, researchers and engineers have extensively studied the problem of how to enable a software system to deal with uncertain operating conditions. One prominent solution to this problem is self-adaptation, which equips a software system with a feedback loop that resolves uncertainties during operation and adapts the system to deal with them when necessary. Most self-adaptation approaches developed so far use decision-making mechanisms that focus on achieving a set of goals, i.e., that select for execution the adaptation option with the best estimated benefit. A few approaches have also considered the estimated (one-off) cost of executing the candidate adaptation options. We argue that besides benefit and cost, decision-making in self-adaptive systems should also consider the estimated risk the system or its users would be exposed to if an adaptation option were selected for execution. Balancing all three factors when evaluating the options for adaptation when mitigating uncertainty is essential, not only for satisfying the concerns of the stakeholders, but also to ensure safety and public acceptance of self-adaptive systems. In this paper, we present an ISO/IEC/IEEE 42010 compatible architectural viewpoint that considers the estimated benefit, cost, and risk as core factors of each adaptation option considered in self-adaptation. The viewpoint aims to support software architects responsible for designing robust decision-making mechanisms for self-adaptive systems.",
    "summary": "This paper proposes a new architectural viewpoint, compliant with ISO/IEC/IEEE 42010, for designing robust decision-making mechanisms in self-adaptive systems by explicitly incorporating benefit, cost, and risk estimations into the selection of adaptation options. This approach aims to improve stakeholder satisfaction, safety, and public acceptance of self-adaptive systems."
  },
  {
    "url": "https://arxiv.org/abs/2101.00397",
    "title": "Early Work on Efficient Patching for Coordinating Edge Applications",
    "published_date": "2021-01-02",
    "abstract": "Multiple applications running on Edge computers can be orchestrated to achieve the desired goal. Orchestration of applications is prominent when working with Internet of Things based applications, Autonomous driving and Autonomous Aerial vehicles. As the applications receive modified classifiers/code, there will be multiple applications that need to be updated. If all the classifiers are synchronously updated there would be increased throughput and bandwidth degradation. On the other hand, delaying updates of applications which need immediate update hinders performance and delays progress towards end goal. The updates of applications should be prioritized and updates should happen according to this priority. This paper explores the setup and benchmarks to understand the impact of updates when multiple applications working to achieve same objective are orchestrated with prioritized updates. We discuss methods to build a distributed, reliable and scalable system called\"DSOC\"(Docker Swarm Orchestration Component).",
    "summary": "This paper investigates efficient patching strategies for coordinating multiple edge applications, focusing on prioritized asynchronous updates to mitigate bandwidth and throughput degradation during classifier/code modifications in scenarios like IoT, autonomous driving, and aerial vehicles. It introduces DSOC, a distributed, reliable, and scalable system for orchestrating these updates."
  },
  {
    "url": "https://arxiv.org/pdf/2106.01154.pdf",
    "title": "Controlled Update of Software Components using Concurrent Exection of Patched and Unpatched Versions",
    "published_date": "2021-06-02",
    "abstract": "Software patching is a common method of removing vulnerabilities in software components to make IT systems more secure. However, there are many cases where software patching is not possible due to the critical nature of the application, especially when the vendor providing the application guarantees correct operation only in a specific configuration. In this paper, we propose a method to solve this problem. The idea is to run unpatched and patched application instances concurrently, with the unpatched one having complete control and the output of the patched one being used only for comparison, to watch for differences that are consequences of introduced bugs. To test this idea, we developed a system that allows us to run web applications in parallel and tested three web applications. The experiments have shown that the idea is promising for web applications from the technical side. Furthermore, we discuss the potential limitations of this system and the idea in general, how long two instances should run in order to be able to claim with some probability that the patched version has not introduced any new bugs, other potential use cases of the proposed system where two application instances run concurrently, and finally the potential uses of this system with different types of applications, such as SCADA systems.",
    "summary": "This paper proposes a method for safely updating software components by concurrently running patched and unpatched versions, using the unpatched version's output as the control and comparing it to the patched version's output to detect introduced bugs. Experiments with web applications demonstrate the technical feasibility, though limitations and future applications are also discussed."
  },
  {
    "title": "Preventive replacement policies with products update announcements",
    "abstract": "Abstract When we consider the improvement of the functional performances that are released by the new updates of the products, it is an interesting problem to revisit the existing replacement policies. For such a viewpoint, four replacement models with product update announcements, i.e., PUA for abbreviation, are given in this paper: Model 1, the unit is replaced at time T or at PUA over time T. Model 2, the unit is replaced at the Kth failure or at PUA over the Kth failure. By considering both time T and failure K, Models 3 and 4 are obtained based on the approaches of replacement first and last. We obtain the expected cost rates for four models and discuss analytically their optimal replacement policies Further, numerical examples are given when the time for PUA has an exponential distribution.",
    "published_date": "2020-01-15",
    "citation_count": 13,
    "url": "https://www.tandfonline.com/doi/full/10.1080/03610926.2019.1710762",
    "summary": "This paper analyzes four preventive replacement models that incorporate product update announcements (PUA), considering replacement based on time, number of failures, or a combination thereof. Optimal replacement policies are derived and analyzed, with numerical examples provided for exponentially distributed PUA times."
  },
  {
    "url": "https://arxiv.org/pdf/2005.07160v1.pdf",
    "title": "XACs-DyPol: Towards an XACML-based Access Control Model for Dynamic Security Policy",
    "published_date": "2020-04-10",
    "abstract": "Authorization and access control play an essential role in protecting sensitive information from malicious users. The system is based on security policies to determine if an access request is allowed. However, of late, the growing popularity of big data has created a new challenge which the security policy management is facing with such as dynamic and update policies in run time. Applications of dynamic policies have brought many benefits to modern domains. To the best of our knowledge, there are no previous studies focusing on solving authorization problems in the dynamic policy environments. In this article, we focus on analyzing and classifying when an update policy occurs, and provide a pragmatic solution for such dynamic policies. The contribution of this work is twofold: a novel solution for managing the policy changes even when the access request has been granted, and an XACML-based implementation to empirically evaluate the proposed solution. The experimental results show the comparison between the newly introduced XACs-DyPol framework with Balana (an open source framework supporting XACML 3.0). The datasets are XACML 3.0-based policies, including three samples of real-world policy sets. According to the comparison results, our XACs-DyPol framework performs better than Balana in terms of all updates in dynamic security policy cases. Specially, our proposed solution outperforms by an order of magnitude when the policy structure includes complex policy sets, policies, and rules or some complicated comparison expression which contains higher than function and less than function.",
    "citation_count": 3,
    "summary": "XACs-DyPol is a novel XACML-based framework for managing dynamic access control policies, offering improved performance over existing solutions like Balana, particularly when dealing with complex policy structures and updates. Its key innovation lies in efficiently handling policy changes even after access requests are granted."
  },
  {
    "url": "https://arxiv.org/pdf/1909.05930v2.pdf",
    "title": "Age of Information Aware Cache Updating with File- and Age-Dependent Update Durations",
    "published_date": "2019-09-12",
    "abstract": "We consider a system consisting of a library of time-varying files, a server that at all times observes the current version of all files, and a cache that at the beginning stores the current versions of all files but afterwards has to update these files from the server. Unlike previous works, the update duration is not constant but depends on the file and its Age of Information (AoI), i.e., of the time elapsed since it was last updated. The goal of this work is to design an update policy that minimizes the average AoI of all files with respect to a given popularity distribution. Actually a relaxed problem, close to the original optimization problem, is solved and a practical update policy is derived. The update policy relies on the file popularity and on the functions that characterize the update durations of the files depending on their AoI. Numerical simulations show a significant improvement of this new update policy compared to the so-called square-root policy that is optimal under file-independent and constant update durations.",
    "citation_count": 43,
    "summary": "This paper proposes a novel cache update policy that minimizes the average age of information (AoI) for time-varying files, accounting for file- and AoI-dependent update durations. The policy, derived from a relaxed optimization problem, significantly outperforms existing methods in simulations."
  }
]