[
  {
    "url": "https://www.alignmentforum.org/posts/JDrxA3vwZAKZfmShz/degeneracies-are-sticky-for-sgd",
    "author": "Guillaume Corlouer; Nicolas Mac√©",
    "title": "Degeneracies are sticky for SGD",
    "published_date": "2024-06-16"
  },
  {
    "url": "https://arxiv.org/abs/2309.07518",
    "title": "Coverage Goal Selector for Combining Multiple Criteria in Search-Based Unit Test Generation",
    "published_date": "2023-09-14",
    "abstract": "Unit testing is critical to the software development process, ensuring the correctness of basic programming units in a program (e.g., a method). Search-based software testing (SBST) is an automated approach to generating test cases. SBST generates test cases with genetic algorithms by specifying the coverage criterion (e.g., branch coverage). However, a good test suite must have different properties, which cannot be captured using an individual coverage criterion. Therefore, the state-of-the-art approach combines multiple criteria to generate test cases. Since combining multiple coverage criteria brings multiple objectives for optimization, it hurts the test suites' coverage for certain criteria compared with using the single criterion. To cope with this problem, we propose a novel approach named <bold>smart selection</bold>. Based on the coverage correlations among criteria and the subsumption relationships among coverage goals, smart selection selects a subset of coverage goals to reduce the number of optimization objectives and avoid missing any properties of all criteria. We conduct experiments to evaluate smart selection on <inline-formula><tex-math notation=\"LaTeX\">$400$</tex-math><alternatives><mml:math><mml:mn>400</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq1-3366613.gif\"/></alternatives></inline-formula> Java classes with three state-of-the-art genetic algorithms under the <inline-formula><tex-math notation=\"LaTeX\">$2$</tex-math><alternatives><mml:math><mml:mn>2</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq2-3366613.gif\"/></alternatives></inline-formula>-minute budget. On average, smart selection outperforms combining all goals on <inline-formula><tex-math notation=\"LaTeX\">$65.1\\%$</tex-math><alternatives><mml:math><mml:mn>65.1</mml:mn><mml:mi mathvariant=\"normal\">%</mml:mi></mml:math><inline-graphic xlink:href=\"zhou-ieq3-3366613.gif\"/></alternatives></inline-formula> of the classes having significant differences between the two approaches. Secondly, we conduct experiments to verify our assumptions about coverage criteria relationships. Furthermore, we assess the coverage performance of smart selection under varying budgets of <inline-formula><tex-math notation=\"LaTeX\">$5$</tex-math><alternatives><mml:math><mml:mn>5</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq4-3366613.gif\"/></alternatives></inline-formula>, <inline-formula><tex-math notation=\"LaTeX\">$8$</tex-math><alternatives><mml:math><mml:mn>8</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq5-3366613.gif\"/></alternatives></inline-formula>, and <inline-formula><tex-math notation=\"LaTeX\">$10$</tex-math><alternatives><mml:math><mml:mn>10</mml:mn></mml:math><inline-graphic xlink:href=\"zhou-ieq6-3366613.gif\"/></alternatives></inline-formula> minutes and explore its effect on bug detection, confirming the advantage of smart selection over combining all goals."
  },
  {
    "url": "https://arxiv.org/pdf/2203.09596v2.pdf",
    "title": "Prioritized Variable-length Test Cases Generation for Finite State Machines",
    "published_date": "2022-03-17",
    "abstract": "Model-based Testing (MBT) is an effective approach for testing when parts of a system-under-test have the characteristics of a finite state machine (FSM). Despite various strategies in the literature on this topic, little work exists to handle special testing situations. More specifically, when concurrently: (1) the test paths can start and end only in defined states of the FSM, (2) a prioritization mechanism that requires only defined states and transitions of the FSM to be visited by test cases is required, and (3) the test paths must be in a given length range, not necessarily of explicit uniform length. This paper presents a test generation strategy that satisfies all these requirements. A concurrent combination of these requirements is highly practical for real industrial testing. Six variants of possible algorithms to implement this strategy are described. Using a mixture of 180 problem instances from real automotive and defense projects and artificially generated FSMs, all variants are compared with a baseline strategy based on an established N-switch coverage concept modification. Various properties of the generated test paths and their potential to activate fictional defects defined in FSMs are evaluated. The presented strategy outperforms the baseline in most problem configurations. Out of the six analyzed variants, three give the best results even though a universal best performer is hard to identify. Depending on the application of the FSM, the strategy and evaluation presented in this paper are applicable both in testing functional and non-functional software requirements.",
    "citation_count": 1
  },
  {
    "url": "https://arxiv.org/abs/2208.04096",
    "title": "Selectively Combining Multiple Coverage Goals in Search-Based Unit Test Generation",
    "published_date": "2022-08-08",
    "abstract": "Unit testing is a critical part of software development process, ensuring the correctness of basic programming units in a program (e.g., a method). Search-based software testing (SBST) is an automated approach to generating test cases. SBST generates test cases with genetic algorithms by specifying the coverage criterion (e.g., branch coverage). However, a good test suite must have different properties, which cannot be captured by using an individual coverage criterion. Therefore, the state-of-the-art approach combines multiple criteria to generate test cases. As combining multiple coverage criteria brings multiple objectives for optimization, it hurts the test suites' coverage for certain criteria compared with using the single criterion. To cope with this problem, we propose a novel approach named smart selection. Based on the coverage correlations among criteria and the coverage goals' subsumption relationships, smart selection selects a subset of coverage goals to reduce the number of optimization objectives and avoid missing any properties of all criteria. We conduct experiments to evaluate smart selection on 400 Java classes with three state-of-the-art genetic algorithms. On average, smart selection outperforms combining all goals on of the classes having significant differences between the two approaches.",
    "citation_count": 6
  },
  {
    "url": "https://arxiv.org/pdf/2302.07646.pdf",
    "title": "Genetic Micro-Programs for Automated Software Testing with Large Path Coverage",
    "published_date": "2022-07-18",
    "abstract": "Ongoing progress in computational intelligence (CI) has led to an increased desire to apply CI techniques for the pur-pose of improving software engineering processes, particularly software testing. Existing state-of-the-art automated software testing techniques focus on utilising search algorithms to discover input values that achieve high execution path coverage. These algorithms are trained on the same code that they intend to test, requiring instrumentation and lengthy search times to test each software component. This paper outlines a novel genetic programming framework, where the evolved solutions are not input values, but micro-programs that can repeatedly generate input values to efficiently explore a software component's input parameter domain. We also argue that our approach can be generalised such as to be applied to many different software systems, and is thus not specific to merely the particular software component on which it was trained."
  },
  {
    "url": "https://www.lesswrong.com/posts/kyvCNgx9oAwJCuevo/deep-q-networks-explained",
    "author": "Jay Bailey",
    "title": "Deep Q-Networks Explained",
    "published_date": "2022-09-13"
  }
]