[
  {
    "url": "https://www.lesswrong.com/posts/dPpA79MjPdDd87YoW/understanding-goedel-s-completeness-theorem",
    "author": "Jessicata",
    "title": "Understanding Gödel's completeness theorem",
    "published_date": "2024-05-27",
    "summary": "This article presents a proof of a variant of Gödel's completeness theorem using sequent calculus, aiming for intuitive understanding rather than symbolic manipulation. It defines first-order theories and models, introduces sequent rules, and demonstrates the soundness of each rule."
  },
  {
    "url": "https://arxiv.org/abs/2304.13517",
    "title": "Leveraging Compositional Methods for Modeling and Verification of an Autonomous Taxi System",
    "published_date": "2023-04-26",
    "abstract": "We apply a compositional formal modeling and verification method to an autonomous aircraft taxi system. We provide insights into the modeling approach and we identify several research areas where further development is needed. Specifically, we identify the following needs: (1) semantics of composition of viewpoints expressed in different specification languages, and tools to reason about heterogeneous declarative models; (2) libraries of formal models for autonomous systems to speed up modeling and enable efficient reasoning; (3) methods to lift verification results generated by automated reasoning tools to the specification level; (4) probabilistic contract frameworks to reason about imperfect implementations; (5) standard high-level functional architectures for autonomous systems; and (6) a theory of higher-order contracts. We believe that addressing these research needs, among others, could improve the adoption of formal methods in the design of autonomous systems including learning-enabled systems, and increase confidence in their safe operations.",
    "citation_count": 1,
    "summary": "This paper uses compositional formal methods to model and verify an autonomous taxi system, highlighting the need for further research in areas such as heterogeneous model composition, reusable model libraries, and probabilistic contract frameworks to enhance the safety and reliability of autonomous systems."
  },
  {
    "url": "https://arxiv.org/abs/2211.01341",
    "title": "A logical framework to model software development by multiple agents following a common specification",
    "published_date": "2022-11-02",
    "abstract": "\n In this paper, we address modelling program development by multiple different programmers (or programming teams) who work in different settings (programming languages or reasoning frameworks) but follow a common specification. After consideration of some philosophical issues regarding program development, including its similarities and dissimilarities with scientific theorizing, we extend a logical framework built to describe scientific theorizing in relativist settings: our extensions add the ability of reasoning about programs, the iterative process of their generation and their specifications. We are thus able to use the framework in order to make a first step towards examining at an abstract level the problem of translatability between the programs produced by program generators, by defining a notion of translation between the outputs of program generators and proving that there is such a (trivial) translation when two program generators follow the same specification reliably (in a specific sense of reliability).",
    "summary": "This paper presents a logical framework extending a model of scientific theorizing to represent multi-agent software development from a common specification, enabling analysis of program translatability between different programming environments. The framework models program generation, iteration, and the relationship between programs and their specifications."
  },
  {
    "url": "https://arxiv.org/pdf/2201.03504v1.pdf",
    "title": "Formal metatheory of second-order abstract syntax",
    "published_date": "2022-01-10",
    "abstract": "Despite extensive research both on the theoretical and practical fronts, formalising, reasoning about, and implementing languages with variable binding is still a daunting endeavour – repetitive boilerplate and the overly complicated metatheory of capture-avoiding substitution often get in the way of progressing on to the actually interesting properties of a language. Existing developments offer some relief, however at the expense of inconvenient and error-prone term encodings and lack of formal foundations. We present a mathematically-inspired language-formalisation framework implemented in Agda. The system translates the description of a syntax signature with variable-binding operators into an intrinsically-encoded, inductive data type equipped with syntactic operations such as weakening and substitution, along with their correctness properties. The generated metatheory further incorporates metavariables and their associated operation of metasubstitution, which enables second-order equational/rewriting reasoning. The underlying mathematical foundation of the framework – initial algebra semantics – derives compositional interpretations of languages into their models satisfying the semantic substitution lemma by construction.",
    "citation_count": 20,
    "summary": "This paper presents a formal framework, implemented in Agda, for defining and reasoning about languages with variable binding, using initial algebra semantics to generate intrinsically-encoded data types with correct syntactic operations including substitution and metasubstitution for second-order reasoning. This approach aims to simplify the metatheory of languages with binding, avoiding the complexities of traditional approaches."
  },
  {
    "url": "https://www.lesswrong.com/posts/xmWfNDnEf36yQBLY9/to-make-better-software-do-what-artists-do",
    "author": "matto",
    "title": "To Make Better Software, Do What Artists Do",
    "published_date": "2022-04-01",
    "summary": "The author argues that software development is better understood as a compositional art, like writing, rather than a purely engineering process. This artistic approach emphasizes skillful arrangement and refinement of code to produce high-quality, maintainable software, contrasting with the often-flawed \"engineering\" metaphor that leads to predictable failures."
  },
  {
    "url": "https://arxiv.org/pdf/2108.12773v1.pdf",
    "title": "Towards formally analyzed Cyber-Physical Systems",
    "published_date": "2021-08-29",
    "abstract": "Cyber-physical systems (CPS) can be found everywhere: smart homes, autonomous vehicles, aircrafts, healthcare, agriculture and industrial production lines. CPSs are often critical, as system failure can cause serious damage to property and human lives. Today's cyber-physical systems are extremely complex, heterogeneous systems: to be able to manage their complexity in a unified way, we need an infrastructure that ensures that our systems operate with the high reliability as intended. In addition to the infrastructure, we need to provide engineers a method to ensure system reliability at design time. The paradigm of model-driven design provides a toolkit supporting the design and analysis and by choosing the proper formalisms, the model-driven design approach allows us to validate our system at design time.",
    "citation_count": 1,
    "summary": "The paper advocates for model-driven design and formal analysis techniques to improve the reliability and safety of complex cyber-physical systems (CPS), mitigating risks associated with their widespread deployment in critical applications. This approach enables verification of system properties at the design stage, reducing the likelihood of failures."
  },
  {
    "title": "Introduction to the Special Issue on Specification and Design Languages (FDL 2019)",
    "abstract": "The Forum on Specification and Design Languages (FDL) is a well-established international venue to exchange experiences and promote new trends in the application of languages, their associated design methods, and tools for the design of electronic systems. Electronic systems of interest to FDL include (but are not limited to) those that are used in Internet of Things (IoT), CyberPhysical Systems, mixed criticality embedded systems, embedded systems for high-performance computing and driver assistance, real-time systems, and reconfigurable and secure computing. FDL 2019 was held in Southampton, UK, September 2–4, bringing together 44 researchers and practicioners from 10 countries. The three keynotes covered themes ranging from designing heterogeneous domain-specific languages and compilers (David Broman, KTH Royal Institute of Technology, Stockholm) over balancing implementability, understandability, and expressiveness in language design (Stephen A. Edwards, Columbia University, New York) to formal languages for embedded critical software (Marc Pouzet, École Normale Supérieure, Paris). In addition, the technical program of FDL 2019 contained two tutorials, two panels, and six technical sessions with a total of 26 presentations. To allow for more in-depth treatment of selected contributions and to further broaden the audience, an open call was made for this special issue in ACM TECS. As a result, six updated and extended papers from FDL'19 are included here, joined by a seventh paper on original work not presented at FDL before. “SystemC implementation of Stochastic Petri Nets for Parametrization of Biological Networks” is authored by Nicola Bombieri, Silvia Scaffeo, Antonio Mastrandrea, Simone Caligola, Tommaso Carlucci, Franco Fummi, Carlo Laudanna, Gabriela Constantin, and Rosalba Giugno. This multidisciplinary paper presents a framework for the modeling and simulation of biological network using Stochastic Petri Nets. To achieve automatic model parametrization, the Stochastic Petri Nets model is implemented into SystemC code, while user-defined properties are specified with a formal specification language. Then, Dynamic Assertion-Based Verification is used to synthesize an appropriate network and parameter configuration that satisfies the defined properties. This allows the system to be simulated under different conditions and network properties. “Event-B Hybridation: A Proof and Refinement Based Framework for Modelling Hybrid Systems,” by Guillaume Dupont, Yamine Ait-Ameur, Marc Pantel, and Neeraj Singh, is an original work not presented at FDL '19. It addresses the difficult topic of the formal proof (in the proof assistant sense) and the incremental design of hybrid systems. The underlying proof assistant is the Rodin Proof Manager and its associated programming language Event-B (based on the B method by Abrial). Hybrid systems are modeled as standard hybrid automata with simple differential equations, which is classical. The strong point of the proposed approach is that the proof obligations",
    "published_date": "2021-05-28",
    "url": "https://dl.acm.org/doi/10.1145/3458748",
    "summary": "This special issue of ACM TECS features seven papers, six extended from the FDL 2019 conference and one original contribution. The papers cover various aspects of specification and design languages for electronic systems, focusing on diverse application domains such as biological networks and hybrid systems."
  },
  {
    "url": "https://arxiv.org/pdf/2108.08139v2.pdf",
    "title": "Towards Mapping Control Theory and Software Engineering Properties using Specification Patterns",
    "published_date": "2021-08-18",
    "abstract": "A traditional approach to realize self-adaptation in software engineering (SE) is by means of feedback loops. The goals of the system can be specified as formal properties that are verified against models of the system. On the other hand, control theory (CT) provides a well-established foundation for designing feedback loop systems and providing guarantees for essential properties, such as stability, settling time, and steady state error. Currently, it is an open question whether and how traditional SE approaches to self-adaptation consider properties from CT. Answering this question is challenging given the principle differences in representing properties in both fields. In this paper, we take a first step to answer this question. We follow a bottom up approach where we specify a control design (in Simulink) for a case inspired by Scuderia Ferrari (F1) and provide evidence for stability and safety. The design is then transferred into code (in C) that is further optimized. Next, we define properties that enable verifying whether the control properties still hold at code level. Then, we consolidate the solution by mapping the properties in both worlds using specification patterns as common language and we verify the correctness of this mapping. The mapping offers a reusable artifact to solve similar problems. Finally, we outline opportunities for future work, particularly to refine and extend the mapping and investigate how it can improve the engineering of self-adaptive systems for both SE and CT engineers.",
    "citation_count": 3,
    "summary": "This paper explores the mapping between control theory properties (e.g., stability) and software engineering properties in self-adaptive systems, using a Scuderia Ferrari-inspired case study to demonstrate a method for transferring control designs from Simulink to C code and verifying property preservation via specification patterns. The resulting mapping provides a reusable artifact for bridging the gap between control theory and software engineering practices."
  }
]