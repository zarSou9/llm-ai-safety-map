[
  {
    "url": "https://www.lesswrong.com/posts/dPpA79MjPdDd87YoW/understanding-goedel-s-completeness-theorem",
    "author": "Jessicata",
    "title": "Understanding Gödel's completeness theorem",
    "published_date": "2024-05-27",
    "summary": "This article presents a proof of a variant of Gödel's completeness theorem using sequent calculus, focusing on intuitive understanding rather than symbolic manipulation. The author defines first-order theories and models, introduces sequent rules, and demonstrates the soundness of each rule to prove completeness."
  },
  {
    "url": "https://www.lesswrong.com/posts/yf6gAcgPp22T7AdnZ/explaining-a-math-magic-trick",
    "author": "Robert AIZI",
    "title": "Explaining a Math Magic Trick",
    "published_date": "2024-05-05",
    "summary": "A viral math trick uses a series expansion of (1-x)⁻¹ to solve a differential equation, which unexpectedly fails when directly substituting the derivative operator; the article explains this failure and the success of the integral version using functional analysis and operator norms, highlighting the importance of considering the \"size\" of operators for the series expansion to converge."
  },
  {
    "url": "https://arxiv.org/abs/2302.13913v2",
    "title": "Stress Testing Control Loops in Cyber-physical Systems",
    "published_date": "2023-02-27",
    "abstract": "Cyber-physical Systems (CPSs) are often safety-critical and deployed in uncertain environments. Identifying scenarios where CPSs do not comply with requirements is fundamental but difficult due to the multidisciplinary nature of CPSs. We investigate the testing of control-based CPSs, where control and software engineers develop the software collaboratively. Control engineers make design assumptions during system development to leverage control theory and obtain guarantees on CPS behaviour. In the implemented system, however, such assumptions are not always satisfied, and their falsification can lead the loss of guarantees. We define stress testing of control-based CPSs as generating tests to falsify such design assumptions. We highlight different types of assumptions, focusing on the use of linearised physics models. To generate stress tests falsifying such assumptions, we leverage control theory to qualitatively characterise the input space of a control-based CPS. We propose a novel test parametrisation for control-based CPSs and use it with the input space characterisation to develop a stress testing approach. We evaluate our approach on three case study systems, including a drone, a continuous-current motor (in five configurations), and an aircraft. Our results show the effectiveness of the proposed testing approach in falsifying the design assumptions and highlighting the causes of assumption violations.",
    "citation_count": 3,
    "summary": "This paper proposes a novel stress testing approach for control-based cyber-physical systems (CPSs) that focuses on falsifying design assumptions, particularly those related to linearized physics models, by leveraging control theory to characterize the input space and generate effective test parameters. The approach is evaluated on three case studies, demonstrating its effectiveness in identifying assumption violations and their root causes."
  },
  {
    "url": "https://www.lesswrong.com/posts/d9MkMeLWvoDEsqpQP/a-compilation-of-misuses-of-statistics",
    "author": "Younes Kamel",
    "title": "A compilation of misuses of statistics",
    "published_date": "2022-02-14",
    "summary": "The article highlights common statistical errors, particularly the false assumption of Gaussian distributions in areas like finance and the misinterpretation of p-values, leading to flawed conclusions. It emphasizes the importance of considering factors like base rates and statistical power to avoid inaccurate results and \"truth inflation\" in research."
  },
  {
    "url": "https://arxiv.org/pdf/2108.12773v1.pdf",
    "title": "Towards formally analyzed Cyber-Physical Systems",
    "published_date": "2021-08-29",
    "abstract": "Cyber-physical systems (CPS) can be found everywhere: smart homes, autonomous vehicles, aircrafts, healthcare, agriculture and industrial production lines. CPSs are often critical, as system failure can cause serious damage to property and human lives. Today's cyber-physical systems are extremely complex, heterogeneous systems: to be able to manage their complexity in a unified way, we need an infrastructure that ensures that our systems operate with the high reliability as intended. In addition to the infrastructure, we need to provide engineers a method to ensure system reliability at design time. The paradigm of model-driven design provides a toolkit supporting the design and analysis and by choosing the proper formalisms, the model-driven design approach allows us to validate our system at design time.",
    "citation_count": 1,
    "summary": "The paper advocates for using model-driven design with formal methods to analyze the reliability of complex cyber-physical systems (CPS) at the design stage, mitigating the risks associated with their critical applications. This approach aims to improve the safety and trustworthiness of CPS in diverse sectors."
  },
  {
    "url": "https://arxiv.org/pdf/2107.05413v2.pdf",
    "title": "Formal Methods in Railways: A Systematic Mapping Study",
    "published_date": "2021-07-12",
    "abstract": "Formal methods are mathematically based techniques for the rigorous development of software-intensive systems. The railway signaling domain is a field in which formal methods have traditionally been applied, with several success stories. This article reports on a mapping study that surveys the landscape of research on applications of formal methods to the development of railway systems. Following the guidelines of systematic reviews, we identify 328 relevant primary studies, and extract information about their demographics, the characteristics of formal methods used and railway-specific aspects. Our main results are as follows: (i) we identify a total of 328 primary studies relevant to our scope published between 1989 and 2020, of which 44% published during the last 5 years and 24% involved industry; (ii) the majority of studies are evaluated through Examples (41%) and Experience Reports (38%), while full-fledged Case Studies are limited (1.5%); (iii) Model checking is the most commonly adopted technique (47%), followed by simulation (27%) and theorem proving (19.5%); (iv) the dominant languages are UML (18%) and B (15%), while frequently used tools are ProB (9%), NuSMV (8%), and UPPAAL (7%); however, a diverse landscape of languages and tools is employed; (v) the majority of systems are interlocking products (40%), followed by models of high-level control logic (27%); and (vi) most of the studies focus on the Architecture (66%) and Detailed Design (45%) development phases. Based on these findings, we highlight current research gaps and expected actions. In particular, the need to focus on more empirically sound research methods, such as Case Studies and Controlled Experiments, and to lower the degree of abstraction, by applying formal methods and tools to development phases that are closer to software development. Our study contributes with an empirically based perspective on the future of research and practice in formal methods applications for railways. It can be used by formal methods researchers to better focus their scientific inquiries, and by railway practitioners for an improved understanding of the interplay between formal methods and their specific application domain.",
    "citation_count": 27,
    "summary": "This systematic mapping study analyzes 328 research papers on applying formal methods to railway systems, revealing a prevalence of model checking and a focus on higher-level design phases, while highlighting a need for more rigorous empirical validation and lower-level application of these methods."
  },
  {
    "url": "https://arxiv.org/pdf/2102.06037v1.pdf",
    "title": "Validation Obligations: A Novel Approach to Check Compliance between Requirements and their Formal Specification",
    "published_date": "2021-02-11",
    "abstract": "Traditionally, practitioners use formal methods pre-dominately for one half of the quality-assurance process: verification (do we build the software right?). The other half - validation (do we build the right software?) - has been given comparatively little attention. While verification is the core of refinement-based formal methods, where each new refinement step must preserve all properties of its abstract model, validation is usually postponed until the latest stages of the development, when models can be automatically executed. Thus mistakes in requirementsor in their interpretation are caught too late: usually at the endof the development process. In this paper, we present a novelapproach to check compliance between requirements and theirformal refinement-based specification during the earlier stages ofdevelopment. Our proposed approach - \"validation obligations\"- is based on the simple idea that both verification and validationare an integral part of all refinement steps of a system.",
    "citation_count": 5,
    "summary": "This paper introduces \"validation obligations,\" a novel approach integrating validation with verification in each refinement step of formal methods, enabling early detection of discrepancies between requirements and their formal specifications. This contrasts with traditional approaches that largely defer validation until late in the development process."
  },
  {
    "url": "https://arxiv.org/pdf/2108.08139v2.pdf",
    "title": "Towards Mapping Control Theory and Software Engineering Properties using Specification Patterns",
    "published_date": "2021-08-18",
    "abstract": "A traditional approach to realize self-adaptation in software engineering (SE) is by means of feedback loops. The goals of the system can be specified as formal properties that are verified against models of the system. On the other hand, control theory (CT) provides a well-established foundation for designing feedback loop systems and providing guarantees for essential properties, such as stability, settling time, and steady state error. Currently, it is an open question whether and how traditional SE approaches to self-adaptation consider properties from CT. Answering this question is challenging given the principle differences in representing properties in both fields. In this paper, we take a first step to answer this question. We follow a bottom up approach where we specify a control design (in Simulink) for a case inspired by Scuderia Ferrari (F1) and provide evidence for stability and safety. The design is then transferred into code (in C) that is further optimized. Next, we define properties that enable verifying whether the control properties still hold at code level. Then, we consolidate the solution by mapping the properties in both worlds using specification patterns as common language and we verify the correctness of this mapping. The mapping offers a reusable artifact to solve similar problems. Finally, we outline opportunities for future work, particularly to refine and extend the mapping and investigate how it can improve the engineering of self-adaptive systems for both SE and CT engineers.",
    "citation_count": 3,
    "summary": "This paper investigates the relationship between control theory (CT) properties and software engineering (SE) properties in self-adaptive systems, using a case study to map properties between a Simulink control design and its C code implementation via specification patterns. The resulting mapping provides a reusable artifact for verifying the transfer of critical properties and facilitates collaboration between SE and CT engineers."
  },
  {
    "url": "https://arxiv.org/pdf/2110.12586v1.pdf",
    "title": "Complete Agent-driven Model-based System Testing for Autonomous Systems",
    "published_date": "2021-10-21",
    "abstract": "In this position paper, a novel approach to testing complex autonomous transportation systems (ATS) in the automotive, avionic, and railway domains is described. It is intended to mitigate some of the most critical problems regarding verification and validation (V&V) effort for ATS. V&V is known to become infeasible for complex ATS, when using conventional methods only. The approach advocated here uses complete testing methods on the module level, because these establish formal proofs for the logical correctness of the software. Having established logical correctness, system-level tests are performed in simulated cloud environments and on the target system. To give evidence that 'sufficiently many' system tests have been performed with the target system, a formally justified coverage criterion is introduced. To optimise the execution of very large system test suites, we advocate an online testing approach where multiple tests are executed in parallel, and test steps are identified on-the-fly. The coordination and optimisation of these executions is achieved by an agent-based approach. Each aspect of the testing approach advocated here is shown to either be consistent with existing standards for development and V&V of safety-critical transportation systems, or it is justified why it should become acceptable in future revisions of the applicable standards.",
    "citation_count": 7,
    "summary": "This paper proposes a novel agent-driven approach to testing autonomous systems, combining complete module-level testing with system-level simulation and target system testing, using a formally justified coverage criterion and online, parallel test execution for efficient, comprehensive verification and validation. This approach aims to address the infeasibility of conventional testing methods for complex autonomous systems."
  },
  {
    "url": "https://arxiv.org/pdf/2101.01933v1.pdf",
    "title": "Combining Genetic Programming and Model Checking to Generate Environment Assumptions",
    "published_date": "2021-01-06",
    "abstract": "Software verification may yield spurious failures when environment assumptions are not accounted for. Environment assumptions are the expectations that a system or a component makes about its operational environment and are often specified in terms of conditions over the inputs of that system or component. In this article, we propose an approach to automatically infer environment assumptions for Cyber-Physical Systems (CPS). Our approach improves the state-of-the-art in three different ways: First, we learn assumptions for complex CPS models involving signal and numeric variables; second, the learned assumptions include arithmetic expressions defined over multiple variables; third, we identify the trade-off between soundness and coverage of environment assumptions and demonstrate the flexibility of our approach in prioritizing either of these criteria. We evaluate our approach using a public domain benchmark of CPS models from Lockheed Martin and a component of a satellite control system from LuxSpace, a satellite system provider. The results show that our approach outperforms state-of-the-art techniques on learning assumptions for CPS models, and further, when applied to our industrial CPS model, our approach is able to learn assumptions that are sufficiently close to the assumptions manually developed by engineers to be of practical value.",
    "citation_count": 4,
    "summary": "This paper presents a novel method for automatically inferring environment assumptions in Cyber-Physical Systems (CPS) using genetic programming and model checking, improving upon existing techniques by handling complex models with numeric variables and offering control over the trade-off between assumption soundness and coverage. The approach is validated through experiments on benchmark CPS models and an industrial satellite control system, demonstrating superior performance and practical applicability."
  }
]