[
  {
    "url": "https://arxiv.org/abs/2412.16224",
    "title": "Formal Verification of Permission Voucher",
    "published_date": "2024-12-18",
    "abstract": "Formal verification is a critical process in ensuring the security and correctness of cryptographic protocols, particularly in high-assurance domains. This paper presents a comprehensive formal analysis of the Permission Voucher Protocol, a system designed for secure and authenticated access control in distributed environments. The analysis employs the Tamarin Prover, a state-of-the-art tool for symbolic verification, to evaluate key security properties such as authentication, confidentiality, integrity, mutual authentication, and replay prevention. We model the protocol's components, including trust relationships, secure channels, and adversary capabilities under the Dolev-Yao model. Verification results confirm the protocol's robustness against common attacks such as message tampering, impersonation, and replay. Additionally, dependency graphs and detailed proofs demonstrate the successful enforcement of security properties like voucher authenticity, data confidentiality, and key integrity. The study identifies potential enhancements, such as incorporating timestamp-based validity checks and augmenting mutual authentication mechanisms to address insider threats and key management challenges. This work highlights the advantages and limitations of using the Tamarin Prover for formal security verification and proposes strategies to mitigate scalability and performance constraints in complex systems.",
    "summary": "This paper formally verifies the security of the Permission Voucher Protocol using the Tamarin Prover, confirming its resistance to various attacks and identifying areas for improvement in key management and insider threat mitigation. The analysis focused on properties like authentication, confidentiality, and integrity."
  },
  {
    "url": "https://arxiv.org/abs/2304.12530",
    "title": "Resource Specifications for Resource-Manipulating Programs",
    "published_date": "2023-04-25",
    "abstract": "Specifications for modular program verifiers are expressed as constraints on program states (e.g. preconditions) and relations on program states (e.g. postconditions). For programs whose domain is managing resources of any kind (e.g. cryptocurrencies), such state-based specifications must make explicit properties that a human would implicitly understand for free. For example, it's clear that depositing into your bank account will not change other balances, but classically this must be stated as a frame condition. As a result, classical specifications for resource-manipulating programs quickly become verbose and difficult to interpret, write and debug. In this paper, we present a novel methodology that extends a modular program verifier to support user-defined first-class resources, allowing resource-related operations and properties to be expressed directly and eliminating the need to reify implicit knowledge in the specifications. We implement our methodology as an extension of the program verifier Prusti, and use it to verify real-world smart contracts and a key part of a blockchain application. Our evaluation demonstrates that specifications written with our methodology are more concise and substantially simpler than specifications written purely in terms of program states.",
    "summary": "This paper introduces a new methodology for specifying resource-manipulating programs (like smart contracts) that directly expresses resource operations and properties, avoiding verbose and implicit state-based specifications. This approach, implemented as an extension to the Prusti verifier, results in more concise and understandable specifications."
  },
  {
    "url": "https://arxiv.org/abs/2205.02963",
    "title": "Privacy-from-Birth: Protecting Sensed Data from Malicious Sensors with VERSA",
    "published_date": "2022-05-01",
    "abstract": "With the growing popularity of the Internet-of-Things (IoT), massive numbers of specialized devices are deployed worldwide, in many everyday settings, including homes, offices, vehicles, public spaces, and factories. Such devices usually perform sensing and/or actuation. Many of them handle sensitive and personal data. If left unprotected, ambient sensing (e.g., of temperature, motion, audio, or video) can leak very private information. At the same time, some IoT devices use low-end computing platforms with few (or no) security features.There are many well-known techniques to secure sensed data, e.g., by authenticating communication end-points, encrypting data before transmission, and obfuscating traffic patterns. Such techniques protect sensed data from external adversaries, while assuming that the sensing device itself is secure. Meanwhile, both the scale and frequency of IoT-focused attacks are growing. This prompts a natural question: how to protect sensed data even if all software on the device is compromised? Ideally, in order to achieve this, sensed data must be protected from its genesis, i.e., from the time when a physical analog quantity is converted into its digital counterpart and becomes accessible to software. We refer to this property as PfB: Privacy-from-Birth.In this work, we formalize PfB and design Verified Remote Sensing Authorization (VERSA) â€“ a provably secure and formally verified architecture guaranteeing that only correct execution of expected and explicitly authorized software can access and manipulate sensing interfaces, specifically, General Purpose Input/Output (GPIO), which is the usual boundary between analog and digital worlds on IoT devices. This guarantee is obtained with minimal hardware support and holds even if all device software is compromised. VERSA ensures that malware can neither gain access to sensed data on the GPIO-mapped memory nor obtain any trace thereof. VERSA formally verified and its open-sourced implementation targets resource-constrained IoT edge devices, commonly used for sensing. Experimental results show that PfB is both achievable and affordable for such devices.",
    "citation_count": 7,
    "summary": "VERSA is a formally verified architecture that protects sensed data on resource-constrained IoT devices from compromised software by ensuring only authorized code can access sensor interfaces, achieving \"Privacy-from-Birth\" (PfB) even with complete software compromise. This is accomplished through minimal hardware additions and has been shown to be both feasible and efficient."
  },
  {
    "url": "https://arxiv.org/abs/2106.13263",
    "title": "Aker: A Design and Verification Framework for Safe and Secure SoC Access Control",
    "published_date": "2021-06-24",
    "abstract": "Modern systems on a chip (SoCs) utilize heterogeneous architectures where multiple IP cores have concurrent access to on-chip shared resources. In security-critical applications, IP cores have different privilege levels for accessing shared resources, which must be regulated by an access control system. Aker is a design and verification framework for SoC access control. Aker builds upon the Access Control Wrapper (ACW) - a high performance and easy-to-integrate hardware module that dynamically manages access to shared resources. To build an SoC access control system, Aker distributes the ACWs throughout the SoC, wrapping controller IP cores, and configuring the ACWs to perform local access control. To ensure the access control system is functioning correctly and securely, Aker provides a property-driven security verification using MITRE common weakness enumerations. Aker verifies the SoC access control at the IP level to ensure the absence of bugs in the functionalities of the ACW module, at the firmware level to confirm the secure operation of the ACW when integrated with a hardware root-of-trust (HRoT), and at the system level to evaluate security threats due to the interactions among shared resources. The performance, resource usage, and security of access control systems implemented through Aker is experimentally evaluated on a Xilinx UltraScale+ programmable SoC, it is integrated with the OpenTitan hardware root-of-trust, and it is used to design an access control system for the OpenPULP multicore architecture.",
    "citation_count": 23,
    "summary": "Aker is a framework for designing and verifying secure system-on-chip (SoC) access control, using Access Control Wrappers (ACWs) for efficient hardware-based management and property-driven verification based on MITRE CWE to ensure secure operation at IP, firmware, and system levels. It's demonstrated on Xilinx and OpenTitan platforms."
  },
  {
    "url": "https://arxiv.org/abs/1910.07930v1",
    "title": "Preliminary Steps in Designing and Implementing a Privilege Verifier for PMI",
    "published_date": "2019-10-17",
    "abstract": "We have designed and deployed a system that uses X.509 public-key certificates (PKC) and attribute certificates (AC) for access control. This includes an authorization service for on-line environments where clients are identified by X.509 PKCs and their privileges are expressed with X.509 ACs. During a request to a protected resource, a privilege verifier decides if the user satisfies all the requirements to get access to the controlled resource. In this paper we focus on the steps to be performed by the privilege verifier, which is the entity in charge of validating both the PKCs and the ACs involved. The validation of PKCs and of ACs are two separate tasks but they are closely related. In our system we have identified two distinct entities: the privilege verifier whose task is to validate ACs, and the certificate validation server, whose task is to validate the PKCs. The validation of PKC is more complex, and it thus can be implemented and provided as a service by a dedicated authority, named Validation Authority. This paper describes the model, architecture and implementation of this system. It also includes some preliminary measurements and our future plans for the development of the system.",
    "summary": "This paper details the design and implementation of a privilege verifier using X.509 certificates and attribute certificates for access control, focusing on the verifier's steps in validating both certificate types to authorize access to protected resources. A separate validation authority handles the more complex task of public key certificate validation."
  },
  {
    "title": "Using Provenance for Secure Data Fusion in Cooperative Systems",
    "abstract": "In the context of cooperative systems, data coming from multiple, autonomous, heterogeneous information sources, is processed and fused into new pieces of information that can be further processed by other entities participating in the cooperation. Controlling the access to such evolving and variegated data, often under the authority of different entities, is challenging. In this work, we identify a set of access control requirements for multi-source cooperative systems and propose an attribute-based access control model where provenance information is used to specify access constraints that account for both the evolution of data objects and the process of data fusion. We demonstrate the feasibility of the proposed model by showing how it can be implemented within existing access control mechanisms with minimal changes.",
    "published_date": "2019-05-28",
    "citation_count": 8,
    "url": "https://dl.acm.org/doi/10.1145/3322431.3325100",
    "summary": "This paper proposes an attribute-based access control model for secure data fusion in cooperative systems, leveraging provenance information to manage access to evolving data from multiple sources and account for the data fusion process. The model is shown to be feasible through implementation within existing mechanisms."
  },
  {
    "url": "https://www.lesswrong.com/posts/bZ5WW8Qmm3K2f2dq5/hard-problems-in-cryptocurrency-five-years-later-buterin",
    "author": "philip_b",
    "title": "Hard Problems in Cryptocurrency: Five Years Later - Buterin",
    "published_date": "2019-11-24",
    "summary": "This article explores the mathematical challenges inherent in blockchain technology and proposes mechanism design solutions, such as quadratic voting and funding, to improve cooperation and philanthropic efforts within the blockchain ecosystem."
  },
  {
    "url": "https://www.lesswrong.com/posts/C3WxJHPRERzJqxxeF/why-referer",
    "author": "jefftk",
    "title": "Why \"Referer\"?",
    "published_date": "2019-10-23",
    "summary": "The misspelling of \"Referer\" in HTTP headers originated in the early development of the protocol, likely due to Tim Berners-Lee, and despite later attempts to correct it, the incorrect spelling became ubiquitous due to its widespread adoption."
  }
]